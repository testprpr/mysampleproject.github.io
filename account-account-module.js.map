{"version":3,"sources":["./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/forgot-password.component.ts","./src/app/account/forgot-password.component.html","./src/app/account/layout.component.ts","./src/app/account/layout.component.html","./src/app/account/login.component.ts","./src/app/account/login.component.html","./src/app/account/register.component.ts","./src/app/account/register.component.html","./src/app/account/reset-password.component.ts","./src/app/account/reset-password.component.html","./src/app/account/verify-email.component.ts","./src/app/account/verify-email.component.html"],"names":[],"mappings":"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","file":"account-account-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\nimport { VerifyEmailComponent } from './verify-email.component';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: LayoutComponent,\n        children: [\n            { path: 'login', component: LoginComponent },\n            { path: 'register', component: RegisterComponent },\n            { path: 'verify-email', component: VerifyEmailComponent },\n            { path: 'forgot-password', component: ForgotPasswordComponent },\n            { path: 'reset-password', component: ResetPasswordComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AccountRoutingModule { }","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\nimport { VerifyEmailComponent } from './verify-email.component';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        AccountRoutingModule\n    ],\n    declarations: [\n        LayoutComponent,\n        LoginComponent,\n        RegisterComponent,\n        VerifyEmailComponent,\n        ForgotPasswordComponent,\n        ResetPasswordComponent\n    ]\n})\nexport class AccountModule { }","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first, finalize } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\n@Component({ templateUrl: 'forgot-password.component.html' })\nexport class ForgotPasswordComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            email: ['', [Validators.required, Validators.email]]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.alertService.clear();\n        this.accountService.forgotPassword(this.f.email.value)\n            .pipe(first())\n            .pipe(finalize(() => this.loading = false))\n            .subscribe({\n                next: () => this.alertService.success('Please check your email for password reset instructions'),\n                error: error => this.alertService.error(error)\n            });\n    }\n}","<h3 class=\"card-header\">Forgot Password</h3>\n<div class=\"card-body\">\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label>Email</label>\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                Submit\n            </button>\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\n        </div>\n    </form>\n</div>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AccountService } from '@app/_services';\n\n@Component({ templateUrl: 'layout.component.html' })\nexport class LayoutComponent {\n    constructor(\n        private router: Router,\n        private accountService: AccountService\n    ) {\n        // redirect to home if already logged in\n        if (this.accountService.accountValue) {\n            this.router.navigate(['/']);\n        }\n    }\n}","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-sm-8 offset-sm-2 mt-5\">\n            <div class=\"card m-3\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\n@Component({ templateUrl: 'login.component.html' })\nexport class LoginComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.login(this.f.email.value, this.f.password.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    // get return url from query parameters or default to home page\n                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n                    this.router.navigateByUrl(returnUrl);\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n}","<h3 class=\"card-header\">Login</h3>\n<div class=\"card-body\">\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label>Email</label>\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label>Password</label>\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n            </div>\n        </div>\n        <div class=\"form-row\">\n            <div class=\"form-group col\">\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                    Login\n                </button>\n                <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\n            </div>\n            <div class=\"form-group col text-right\">\n                <a routerLink=\"../forgot-password\" class=\"btn btn-link pr-0\">Forgot Password?</a>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\nimport { MustMatch } from '@app/_helpers';\n\n@Component({ templateUrl: 'register.component.html' })\nexport class RegisterComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            title: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n            confirmPassword: ['', Validators.required],\n            acceptTerms: [false, Validators.requiredTrue]\n        }, {\n            validator: MustMatch('password', 'confirmPassword')\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.register(this.form.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Registration successful, please check your email for verification instructions', { keepAfterRouteChange: true });\n                    this.router.navigate(['../login'], { relativeTo: this.route });\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n}","<h3 class=\"card-header\">Register</h3>\n<div class=\"card-body\">\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-row\">\n            <div class=\"form-group col\">\n                <label>Title</label>\n                <select formControlName=\"title\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.title.errors }\">\n                    <option value=\"\"></option>\n                    <option value=\"Mr\">Mr</option>\n                    <option value=\"Mrs\">Mrs</option>\n                    <option value=\"Miss\">Miss</option>\n                    <option value=\"Ms\">Ms</option>\n                </select>\n                <div *ngIf=\"submitted && f.title.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.title.errors.required\">Title is required</div>\n                </div>\n            </div>\n            <div class=\"form-group col-5\">\n                <label>First Name</label>\n                <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\n                <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n                </div>\n            </div>\n            <div class=\"form-group col-5\">\n                <label>Last Name</label>\n                <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n                <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label>Email</label>\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n            </div>\n        </div>\n        <div class=\"form-row\">\n            <div class=\"form-group col\">\n                <label>Password</label>\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                    <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n                </div>\n            </div>\n            <div class=\"form-group col\">\n                <label>Confirm Password</label>\n                <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\n                <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\n                    <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group form-check\">\n            <input type=\"checkbox\" formControlName=\"acceptTerms\" id=\"acceptTerms\" class=\"form-check-input\" [ngClass]=\"{ 'is-invalid': submitted && f.acceptTerms.errors }\" />\n            <label for=\"acceptTerms\" class=\"form-check-label\">Accept Terms & Conditions</label>\n            <div *ngIf=\"submitted && f.acceptTerms.errors\" class=\"invalid-feedback\">Accept Ts & Cs is required</div>\n        </div>\n        <div class=\"form-group\">\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                Register\n            </button>\n            <a routerLink=\"../login\" href=\"\" class=\"btn btn-link\">Cancel</a>\n        </div>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\nimport { MustMatch } from '@app/_helpers';\n\nenum TokenStatus {\n    Validating,\n    Valid,\n    Invalid\n}\n\n@Component({ templateUrl: 'reset-password.component.html' })\nexport class ResetPasswordComponent implements OnInit {\n    TokenStatus = TokenStatus;\n    tokenStatus = TokenStatus.Validating;\n    token = null;\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            password: ['', [Validators.required, Validators.minLength(6)]],\n            confirmPassword: ['', Validators.required],\n        }, {\n            validator: MustMatch('password', 'confirmPassword')\n        });\n\n        const token = this.route.snapshot.queryParams['token'];\n\n        // remove token from url to prevent http referer leakage\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\n\n        this.accountService.validateResetToken(token)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.token = token;\n                    this.tokenStatus = TokenStatus.Valid;\n                },\n                error: () => {\n                    this.tokenStatus = TokenStatus.Invalid;\n                }\n            });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });\n                    this.router.navigate(['../login'], { relativeTo: this.route });\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n}","<h3 class=\"card-header\">Reset Password</h3>\n<div class=\"card-body\">\n    <div *ngIf=\"tokenStatus == TokenStatus.Validating\">\n        Validating token...\n    </div>\n    <div *ngIf=\"tokenStatus == TokenStatus.Invalid\">\n        Token validation failed, if the token has expired you can get a new one at the <a routerLink=\"../forgot-password\">forgot password</a> page.\n    </div>\n    <form *ngIf=\"tokenStatus == TokenStatus.Valid\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label>Password</label>\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <label>Confirm Password</label>\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\n            <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\n                <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\n                <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</div>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                Reset Password\n            </button>\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\n        </div>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\nenum EmailStatus {\n    Verifying,\n    Failed\n}\n\n@Component({ templateUrl: 'verify-email.component.html' })\nexport class VerifyEmailComponent implements OnInit {\n    EmailStatus = EmailStatus;\n    emailStatus = EmailStatus.Verifying;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        const token = this.route.snapshot.queryParams['token'];\n\n        // remove token from url to prevent http referer leakage\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\n\n        this.accountService.verifyEmail(token)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Verification successful, you can now login', { keepAfterRouteChange: true });\n                    this.router.navigate(['../login'], { relativeTo: this.route });\n                },\n                error: () => {\n                    this.emailStatus = EmailStatus.Failed;\n                }\n            });\n    }\n}","<h3 class=\"card-header\">Verify Email</h3>\n<div class=\"card-body\">\n    <div *ngIf=\"emailStatus == EmailStatus.Verifying\">\n        Verifying...\n    </div>\n    <div *ngIf=\"emailStatus == EmailStatus.Failed\">\n        Verification failed, you can also verify your account using the <a routerLink=\"forgot-password\">forgot password</a> page.\n    </div>\n</div>"],"sourceRoot":"webpack:///"}